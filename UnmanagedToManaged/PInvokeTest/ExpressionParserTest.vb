' Copyright (c) Microsoft Corporation.  All rights reserved.
'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports PInvoke.Parser
Imports Xunit

'''<summary>
'''This is a test class for PInvoke.Parser.ExpressionParser and is intended
'''to contain all PInvoke.Parser.ExpressionParser Unit Tests
'''</summary>
Public Class ExpressionParserTest

    '''<summary>
    '''A test for TryParse(ByVal String, ByRef PInvoke.Parser.ExpressionNode)
    '''</summary>
    <Fact>
    Public Sub Parse1()
        Dim parser As New ExpressionParser()
        Dim node As ExpressionNode = parser.Parse("1+1")
        Assert.Equal(node.DisplayString, "+ (Left: 1)(Right: 1)")
    End Sub

    <Fact>
    Public Sub Parse2()
        Dim parser As New ExpressionParser()
        Dim node As ExpressionNode = parser.Parse("'c'")
        Assert.Equal(node.DisplayString, "'c'")
    End Sub

    <Fact>
    Public Sub Parse3()
        Dim parser As New ExpressionParser()
        Dim node As ExpressionNode = parser.Parse("'c'+2")
        Assert.Equal(node.DisplayString, "+ (Left: 'c')(Right: 2)")
    End Sub

    ''' <summary>
    ''' Basic math operators
    ''' </summary>
    ''' <remarks></remarks>
    <Fact>
    Public Sub ParseMathOperations()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("1+1")
        Assert.Equal(node.DisplayString, "+ (Left: 1)(Right: 1)")
        node = p.Parse("1-1")
        Assert.Equal(node.DisplayString, "- (Left: 1)(Right: 1)")
        node = p.Parse("1/1")
        Assert.Equal(node.DisplayString, "/ (Left: 1)(Right: 1)")
        node = p.Parse("1%1")
        Assert.Equal(node.DisplayString, "% (Left: 1)(Right: 1)")

    End Sub

    <Fact>
    Public Sub ParseBooleanOperations()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("1&&1")
        Assert.Equal(node.DisplayString, "&& (Left: 1)(Right: 1)")
        node = p.Parse("1||1")
        Assert.Equal(node.DisplayString, "|| (Left: 1)(Right: 1)")
    End Sub


    <Fact>
    Public Sub ParseBitwiseOperations()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("1|1")
        Assert.Equal(node.DisplayString, "| (Left: 1)(Right: 1)")
        node = p.Parse("1&1")
        Assert.Equal(node.DisplayString, "& (Left: 1)(Right: 1)")
    End Sub

    <Fact>
    Public Sub Paren1()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("(1)")
        Assert.Equal(node.DisplayString, "1")
        node = p.Parse("(     1)")
        Assert.Equal(node.DisplayString, "1")
    End Sub

    <Fact>
    Public Sub Paren2()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("1+(2+3)")
        Assert.Equal(node.DisplayString, "+ (Left: 1)(Right: + (Left: 2)(Right: 3))")
        node = p.Parse("(1+2)+3")
        Assert.Equal(node.DisplayString, "+ (Left: + (Left: 1)(Right: 2))(Right: 3)")
    End Sub

    <Fact>
    Public Sub CallExpr1()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("defined(foo)")
        Assert.Equal("defined (Left: foo)", node.DisplayString)
    End Sub

    <Fact>
    Public Sub CallExpr2()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("defined(foo, bar)")
        Assert.Equal("defined (Left: foo)(Right: , (Left: bar))", node.DisplayString)
    End Sub

    <Fact>
    Public Sub CallExpr3()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("defined(foo, 1+1)")
        Assert.Equal(node.DisplayString, "defined (Left: foo)(Right: , (Left: + (Left: 1)(Right: 1)))")
    End Sub

    <Fact>
    Public Sub Shift1()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("1>>2")
        Assert.Equal(node.DisplayString, ">> (Left: 1)(Right: 2)")
    End Sub

    <Fact>
    Public Sub Shift2()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("1<<2")
        Assert.Equal(node.DisplayString, "<< (Left: 1)(Right: 2)")
    End Sub

    <Fact>
    Public Sub Cast1()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("(FOO)1")
        Assert.Equal(node.DisplayString, "FOO (Left: 1)")
    End Sub

    <Fact>
    Public Sub Cast2()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("(BAR)(42)")
        Assert.Equal(node.DisplayString, "BAR (Left: 42)")
    End Sub

    <Fact>
    Public Sub Cast3()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode

        node = p.Parse("(FOO)(BAR)1")
        Assert.Equal(node.DisplayString, "FOO (Left: BAR (Left: 1))")
    End Sub

    <Fact>
    Public Sub Complex1()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode = p.Parse("((WORD)((DWORD_PTR)(l) >> 16))")
        Assert.Equal(node.DisplayString, "WORD (Left: DWORD_PTR (Left: >> (Left: l)(Right: 16)))")
    End Sub

    <Fact>
    Public Sub Negative1()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode = p.Parse("-1")
        Assert.Equal(node.DisplayString, "- (Left: 1)")
    End Sub

    <Fact>
    Public Sub Negative2()
        Dim p As New ExpressionParser()
        Dim node As ExpressionNode = p.Parse("-0.1F")
        Assert.Equal(node.DisplayString, "- (Left: 0.1F)")
    End Sub

End Class
